from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ContentType
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton,WebAppInfo
from decimal import Decimal  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import aiofiles
import os

from api.models import User, Booked, Halls, Foods
from api.tg_bot.database import *
from api.tg_bot.classes_functions import Admin
import api.tg_bot.reply as kb
from api.tg_bot.database import check_admin
from PIL import Image


admin_private = Router()




@admin_private.message(Command('admin'))
async def admin_panel(message: Message):
    ch = await check_admin(message.from_user.id)
    print(message)
    if ch:
        await message.answer('üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')

@admin_private.callback_query(F.data == 'statistics')
async def statistics(callback: CallbackQuery):
    await callback.answer()
    
    q = await get_users() 
    q2 = await get_users_status() 
    q3 = await get_users_status2() 
    
    total_orders = await get_total_bookings_count()
    today_orders = await get_today_bookings_count()
    week_orders = await get_week_bookings_count()
    month_orders = await get_month_bookings_count()
    
    await callback.message.answer('üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> \n'
                                  f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{q}</b> \n'
                                  f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{q2}</b> \n'
                                  f'–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{q3}</b> \n'
                                  '\n'
                                  'üì¶ <b>–ó–∞–∫–∞–∑—ã</b> \n'
                                  f'–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>\n'
                                  f'–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{today_orders}</b>\n'
                                  f'–ó–∞–∫–∞–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{week_orders}</b>\n'
                                  f'–ó–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü: <b>{month_orders}</b>')





@admin_private.callback_query(F.data == 'mailing')
async def post_mailing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.mailing_state)

    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏',reply_markup=kb.post_type())

@admin_private.message(Admin.mailing_state)
async def proccess_text(message: Message, state: FSMContext):
    if message.text == "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç":
        await state.set_state(Admin.mailing_text_only)

    elif message.text == "–° —Ñ–æ—Ç–æ":
        await state.set_state(Admin.mailing_text)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',reply_markup=ReplyKeyboardRemove())

@admin_private.message(Admin.mailing_text_only)
async def proccess_text(message: Message, state: FSMContext):
    await state.update_data(mailing_text=message.text)
    await state.set_state(Admin.ask)
    await message.answer('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É \"<b>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</b>\"?')

@admin_private.message(Admin.mailing_text, F.photo)
async def proccess_text(message: Message, state: FSMContext):
    await state.update_data(mailing_text=message.caption)
    await state.update_data(mailing_photo=message.photo[-1].file_id)
    await state.set_state(Admin.ask)
    await message.answer('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É \"<b>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</b>\"?')


@admin_private.message(Admin.ask)
async def procces_ask(message: Message, state: FSMContext):
    await state.update_data(ask=message.text)
    data = await state.get_data()
    if 'mailing_photo' in data:
        photo = data['mailing_photo']
        caption = data['mailing_text']
        text = data['ask']

        if not text:
            text = ""

        if message.text == '–î–∞' or  message.text == '–¥–∞':
            await state.set_state(Admin.confirm_yes)
            await message.answer_photo(photo=photo, caption=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button_yes())

        elif message.text == '–ù–µ—Ç' or  message.text == '–Ω–µ—Ç':
            await state.set_state(Admin.confirm_no)
            
            await message.answer_photo(photo=photo, caption=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button_no())
    else:
        caption = data['mailing_text']
        text = data['ask']


        if message.text == '–î–∞' or  message.text == '–¥–∞':
            await state.set_state(Admin.confirm_yes)
            await message.answer(text=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button_yes())

        elif message.text == '–ù–µ—Ç' or  message.text == '–Ω–µ—Ç':
            await state.set_state(Admin.confirm_no)
            await message.answer(text=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button_yes())


@admin_private.message(Admin.confirm_yes)
async def procces_post_yes(message: Message, state: FSMContext):
    await state.update_data(confirm_yes=message.text)
    data = await state.get_data()
    text = data['confirm_yes']

    if text == '–î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å':
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π
        z = await state.get_data()

        u = await get_users_post()
        if 'mailing_photo' in data:
            c = 0
            caption = data['mailing_text']
            photo = data['mailing_photo']
            for user in u:
                

                await message.bot.send_photo(user['tg_id'], photo=data['mailing_photo'], caption=caption,reply_markup=kb.get_order_post())
                c+=1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{c} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()
        else:
            c = 0
            for user in u:
                

                await message.bot.send_message(user['tg_id'],f'{data["mailing_text"]}',reply_markup=kb.get_order_post())
                c+=1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{c} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()

    if text == '–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è':
        if 'mailing_photo' in data:
            await state.clear()
            await state.set_state(Admin.mailing_text)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ReplyKeyboardRemove())
        else:
            await state.clear()
            await state.set_state(Admin.mailing_text_only)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ReplyKeyboardRemove())

@admin_private.message(Admin.confirm_no)
async def procces_post_no(message: Message, state: FSMContext):
    await state.update_data(confirm_yes=message.text)
    data = await state.get_data()
    # caption = data['mailing_text']
    # photo = data['mailing_photo']
    text = data['confirm_yes']

    if text == '–î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å':
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π
        z = await state.get_data()

        u = await get_users_post()

        
        if 'mailing_photo' in data:
            c = 0
            caption = data['mailing_text']
            photo = data['mailing_photo']
            for user in u:
                

                await message.bot.send_photo(user['tg_id'], photo=data['mailing_photo'], caption=caption)
                c+=1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{c} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()
        else:
            c = 0
            for user in u:
                

                await message.bot.send_message(user['tg_id'],f'{data["mailing_text"]}')
                c+=1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{c} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()
    if text == '–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è':
        if 'mailing_photo' in data:
            await state.clear()
            await state.set_state(Admin.mailing_text)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ReplyKeyboardRemove())
        else:
            await state.clear()
            await state.set_state(Admin.mailing_text_only)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ReplyKeyboardRemove())     

import os
import hashlib

async def file_hash(file_path):
    """Calculate the hash of the file to detect duplicates."""
    hash_md5 = hashlib.md5()
    async with aiofiles.open(file_path, 'rb') as f:
        while True:
            chunk = await f.read(4096)
            if not chunk:
                break
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

@admin_private.callback_query(F.data == 'add_hall')
async def add_hall(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.p_name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.p_name)
async def add_hall_name(message: Message, state: FSMContext):
    user_message = message.text
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.update_data(p_name=user_message)
        await state.update_data(p_photos=[])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ
        await state.set_state(Admin.p_photo1)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 1.', reply_markup=kb.offer_cancel())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—å—à–µ"
@admin_private.callback_query(F.data == 'next')
async def next_step(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    current_state = await state.get_state()
    if current_state.startswith("p_photo"):
        next_state = Admin.p_desc
        await state.set_state(next_state)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ª–∞.', reply_markup=kb.offer_cancel())



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ 1
@admin_private.message(Admin.p_photo1, F.photo)
async def process_photo1(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_photo2, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 2.')

@admin_private.message(Admin.p_photo2, F.photo)
async def process_photo2(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_photo3, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 3.')

@admin_private.message(Admin.p_photo3, F.photo)
async def process_photo3(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_photo4, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 4.')

@admin_private.message(Admin.p_photo4, F.photo)
async def process_photo4(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_photo5, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 5.')

@admin_private.message(Admin.p_photo5, F.photo)
async def process_photo5(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_photo6, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 6.')

@admin_private.message(Admin.p_photo6, F.photo)
async def process_photo6(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_photo7, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 7.')

@admin_private.message(Admin.p_photo7, F.photo)
async def process_photo7(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_photo8, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 8.')

@admin_private.message(Admin.p_photo8, F.photo)
async def process_photo8(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_photo9, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 9.')

@admin_private.message(Admin.p_photo9, F.photo)
async def process_photo9(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_photo10, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 10.')

from aiogram.fsm.state import State, StatesGroup


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ 10
@admin_private.message(Admin.p_photo10, F.photo)
async def process_photo10(message: Message, state: FSMContext):
    await save_photo(message, state, Admin.p_desc, '–í—Å–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ª–∞.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
async def save_photo(message: Message, state: FSMContext, next_state: State, next_prompt: str):
    if next_prompt == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        state.clear()
        await state.set_state(Admin.p_name)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞', reply_markup=kb.offer_cancel())
    else:
        photo = message.photo[-1]
        file_id = photo.file_id
        file_info = await message.bot.get_file(file_id)
        file_path = file_info.file_path
        file_name = f"static/media/halls/{file_id}.webp"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await message.bot.download_file(file_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç webp
        with Image.open(file) as img:
            img.save(file_name, format='webp')
            
        data = await state.get_data()
        photos = data.get('p_photos', [])
        photos.append(file_name)
        await state.update_data(p_photos=photos)

        await state.set_state(next_state)
        await message.answer(next_prompt, reply_markup=kb.photo_menu)


@admin_private.message(Admin.p_photo1, F.text)
@admin_private.message(Admin.p_photo2, F.text)
@admin_private.message(Admin.p_photo3, F.text)
@admin_private.message(Admin.p_photo4, F.text)
@admin_private.message(Admin.p_photo5, F.text)
@admin_private.message(Admin.p_photo6, F.text)
@admin_private.message(Admin.p_photo7, F.text)
@admin_private.message(Admin.p_photo8, F.text)
@admin_private.message(Admin.p_photo9, F.text)
@admin_private.message(Admin.p_photo10, F.text)
async def handle_photo_navigation(message: Message, state: FSMContext):
    
    await state.set_state(Admin.p_desc)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ª–∞.', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.p_desc)
async def add_hall_description(message: Message, state: FSMContext):
    user_message = message.text
    if user_message == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.update_data(p_desc=user_message)
        await state.set_state(Admin.p_capacity)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–ª–∞ (—á–∏—Å–ª–æ)', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.p_capacity)
async def add_hall_capacity(message: Message, state: FSMContext):
    user_message = message.text
    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.update_data(p_capacity=user_message)
        await state.set_state(Admin.p_price)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —á–∞—Å (—á–∏—Å–ª–æ)', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.p_price)
async def add_hall_price(message: Message, state: FSMContext):
    user_message = message.text
    try:
        cost = Decimal(user_message)
        data = await state.get_data()
        hall_name = data['p_name']
        hall_description = data['p_desc']
        hall_capacity = data['p_capacity']
        hall_photos = ",".join(data['p_photos'])  # –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–ø—è—Ç—ã–º–∏
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–ª–∞
        hall = await sync_to_async(Halls.objects.create)(
            name=hall_name,
            desc=hall_description,
            max_people=hall_capacity,
            price=cost,
            photo=hall_photos  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–æ–ª–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏
        )

        await message.answer(f'‚úÖ –ó–∞–ª "{hall_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.')
        await admin_panel(message)
        await state.clear()
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        await state.set_state(Admin.p_price)


async def admin_panel(message: Message):
    await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())


@admin_private.callback_query(F.data == 'add_come_out')
async def come_out_menu(callback: CallbackQuery):
    await callback.message.edit_text('üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())

@admin_private.callback_query(F.data == 'delete_smth')
async def delete_smth(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í—ã–±–∏—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())

@admin_private.callback_query(F.data == 'add_service')
async def add_service(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í—ã–±–∏—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
async def save_photo2(message: Message, state: FSMContext, next_state: State, next_prompt: str):
    if next_prompt == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        state.clear()
        await state.set_state(Admin.p_name)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞', reply_markup=kb.offer_cancel())
    else:
        photo = message.photo[-1]
        file_id = photo.file_id
        file_info = await message.bot.get_file(file_id)
        file_path = file_info.file_path
        file_name = f"static/media/foods/{file_id}.webp"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await message.bot.download_file(file_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç webp
        with Image.open(file) as img:
            img.save(file_name, format='webp')
            

        await state.update_data(s_photo=file_name)

        await state.set_state(next_state)
        await message.answer(next_prompt, reply_markup=kb.offer_cancel())


@admin_private.callback_query(F.data == 'add_foods')
async def add_foods(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.s_type1)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())


@admin_private.message(Admin.s_type1)
async def add_type1(message: Message, state: FSMContext):
    user_message = message.text
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.update_data(type_for=1)
        await state.update_data(s_name=message.text)
        await state.set_state(Admin.s_photo)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())



@admin_private.message(Admin.s_photo, F.photo)
async def process_s_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    type_for = data['type_for']
    if type_for == 1:
        await save_photo2(message, state, Admin.s_desc, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏')
    elif type_for == 2:
        await save_photo3(message, state, Admin.s_desc, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏')
    elif type_for == 3:
        await save_photo4(message, state, Admin.s_desc, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏')

@admin_private.message(Admin.s_photo, F.text)
async def process_s_photo_text(message: Message, state: FSMContext):
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.set_state(Admin.s_photo)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', reply_markup=kb.offer_cancel())


@admin_private.message(Admin.s_desc)
async def process_s_desc(message: Message, state: FSMContext):
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        data = await state.get_data()
        type_for = data['type_for']
        if type_for == 2:
            await state.set_state(Admin.s_price)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)', reply_markup=kb.offer_cancel())
        else:
            await state.update_data(s_desc=message.text)
            await state.set_state(Admin.s_weight)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä\n'
                                '\n'
                                '–ù–∞–ø—Ä–∏–º–µ—Ä, 100 –º–ª. –∏–ª–∏ 10 –≥—Ä.', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.s_weight)
async def process_s_weight(message: Message, state: FSMContext):
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        data = await state.get_data()
        type_for = data['type_for']
        if type_for == 2:
            await state.set_state(Admin.s_price)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)', reply_markup=kb.offer_cancel())
        elif type_for == 1:
            await state.update_data(s_weight=message.text)
            await state.set_state(Admin.s_kitchen)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏', reply_markup=kb.offer_cancel())
        else:
            await state.set_state(Admin.s_price)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.s_kitchen)
async def process_s_kitchen(message: Message, state: FSMContext):
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.update_data(s_kitchen=message.text)
        await state.set_state(Admin.s_compound)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.s_compound)
async def process_s_compound(message: Message, state: FSMContext):
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.update_data(s_compound=message.text)
        await state.set_state(Admin.s_price)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.s_price)
async def process_s_price(message: Message, state: FSMContext):
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.update_data(s_price=message.text)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        photo = data.get('s_photo')
        weight = data.get('s_weight')
        name = data.get('s_name')
        kitchen = data.get('s_kitchen')
        compounds = data.get('s_compound')
        status = Foods.StatusEnum.EXISTS
        price = data.get('s_price')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await save_food(photo, weight, name, kitchen, compounds, status, price)
        await message.answer('‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=kb.admin_panel())
        await state.clear()




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
async def save_photo3(message: Message, state: FSMContext, next_state: State, next_prompt: str):
    if next_prompt == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        state.clear()
        await state.set_state(Admin.p_name)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞', reply_markup=kb.offer_cancel())
    else:
        photo = message.photo[-1]
        file_id = photo.file_id
        file_info = await message.bot.get_file(file_id)
        file_path = file_info.file_path
        file_name = f"static/media/services/{file_id}.webp"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await message.bot.download_file(file_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç webp
        with Image.open(file) as img:
            img.save(file_name, format='webp')
            

        await state.update_data(s_photo=file_name)

        await state.set_state(next_state)
        await message.answer(next_prompt, reply_markup=kb.offer_cancel())


@admin_private.callback_query(F.data == 'add_services')
async def add_services(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.s_type2)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())


@admin_private.message(Admin.s_type2)
async def add_type2(message: Message, state: FSMContext):
    user_message = message.text
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.update_data(type_for=2)
        await state.update_data(s_name=message.text)
        await state.set_state(Admin.s_photo)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())




@admin_private.callback_query(F.data == 'add_goods')
async def add_goods(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.s_type3)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())


@admin_private.message(Admin.s_type3)
async def add_type3(message: Message, state: FSMContext):
    user_message = message.text
    if message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
        await state.clear()
    else:
        await state.update_data(type_for=3)
        await state.update_data(s_name=message.text)
        await state.set_state(Admin.s_photo)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())



async def save_photo4(message: Message, state: FSMContext, next_state: State, next_prompt: str):
    if next_prompt == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        state.clear()
        await state.set_state(Admin.p_name)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞', reply_markup=kb.offer_cancel())
    else:
        photo = message.photo[-1]
        file_id = photo.file_id
        file_info = await message.bot.get_file(file_id)
        file_path = file_info.file_path
        file_name = f"static/media/goods/{file_id}.webp"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await message.bot.download_file(file_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç webp
        with Image.open(file) as img:
            img.save(file_name, format='webp')
            

        await state.update_data(s_photo=file_name)

        await state.set_state(next_state)
        await message.answer(next_prompt, reply_markup=kb.offer_cancel())





@admin_private.callback_query(F.data == 'add_foods')
async def add_foods(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.s_type1)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())

